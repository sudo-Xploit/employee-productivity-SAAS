name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Lint with ruff
        run: |
          ruff check .
          
      - name: Format with black
        run: |
          black . --check

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      # Add PostgreSQL service for integration tests if needed
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Create test directories
        run: |
          mkdir -p reports models
          
      - name: Create test files
        run: |
          mkdir -p reports
          echo "This is a test report" > reports/test_report.txt
          echo "name,department,salary,revenue,profit,roi" > reports/test_report.csv
          echo "John Smith,Engineering,120000,250000,130000,1.08" >> reports/test_report.csv
          echo "%PDF-1.5\n%Test PDF content" > reports/test_report.pdf
          echo "PK\x03\x04" > reports/test_report.xlsx
      
      - name: Test with pytest
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing --xvs -v tests/test_basic.py tests/test_main.py tests/test_analytics.py tests/test_predictions.py tests/test_reports.py
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/employee-productivity-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/employee-productivity-api:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/employee-productivity-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/employee-productivity-api:buildcache,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Deploy to staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/employee-productivity
            docker-compose pull api-prod
            docker-compose up -d api-prod
            docker image prune -f
